{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arvind Singh\\\\OneDrive\\\\SAHIL123\\\\ProjectMainFolder\\\\gfm\\\\form\\\\Frontend\\\\src\\\\components\\\\FormResponse.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../styles/FormResponse.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FormResponse({\n  questions\n}) {\n  _s();\n  const [responses, setResponses] = useState([]);\n\n  // const handleChange = (index, value) => {\n  //   setResponses({ ...responses, [index]: value });\n  // };\n  const handleChange = (questionId, value) => {\n    // Find if the response for this question already exists\n    const existingResponseIndex = responses.findIndex(response => response.questionId === questionId);\n    if (existingResponseIndex !== -1) {\n      // If a response exists for this question, update it\n      const updatedResponses = [...responses];\n      updatedResponses[existingResponseIndex] = {\n        questionId,\n        answerText: value\n      };\n      setResponses(updatedResponses);\n    } else {\n      // If no response exists for this question, add a new one\n      setResponses([...responses, {\n        questionId,\n        answerText: value\n      }]);\n    }\n  };\n  const handleSubmit = async () => {\n    try {\n      // Prepare the responses by formatting them into an array that includes the question IDs and answers\n      const formattedResponses = responses.map(response => ({\n        questionId: response.questionId,\n        // Ensure you include the question ID\n        answerText: response.answerText // Include the user's answer text\n      }));\n\n      // Assuming `formId` is the ID of the form you are submitting to\n      const formId = 'yourFormIdHere'; // Replace with the actual form ID\n\n      // Send the responses to the backend via POST request\n      const response = await fetch(`http://localhost:5000/api/responses/submit/${formId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          answers: formattedResponses\n        })\n      });\n      if (!response.ok) throw new Error('Failed to submit responses');\n      alert('Form submitted successfully!');\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-response\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Submit Your Response\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => e.preventDefault(),\n      children: [questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [q.text, \" \", q.required && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"required\",\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), q.type === \"text\" && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => handleChange(index, e.target.value),\n          required: q.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this), q.type === \"paragraph\" && /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: 4,\n          onChange: e => handleChange(index, e.target.value),\n          required: q.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), q.type === \"radio\" && q.options.map((option, oIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            id: `${index}-${oIndex}`,\n            name: `question-${index}`,\n            onChange: e => handleChange(index, option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `${index}-${oIndex}`,\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 19\n          }, this)]\n        }, oIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)), q.type === \"checkbox\" && q.options.map((option, oIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: `${index}-${oIndex}`,\n            name: `question-${index}`,\n            onChange: e => handleChange(index, [...(responses[index] || []), option])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `${index}-${oIndex}`,\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 19\n          }, this)]\n        }, oIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this)), q.type === \"file\" && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => handleChange(index, e.target.files[0]),\n          required: q.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(FormResponse, \"vMQZFOHJbpBfbx+C6jBQHAS5iO4=\");\n_c = FormResponse;\nexport default FormResponse;\nvar _c;\n$RefreshReg$(_c, \"FormResponse\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FormResponse","questions","_s","responses","setResponses","handleChange","questionId","value","existingResponseIndex","findIndex","response","updatedResponses","answerText","handleSubmit","formattedResponses","map","formId","fetch","method","headers","body","JSON","stringify","answers","ok","Error","alert","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","e","preventDefault","q","index","text","required","type","onChange","target","rows","options","option","oIndex","id","name","htmlFor","files","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Arvind Singh/OneDrive/SAHIL123/ProjectMainFolder/gfm/form/Frontend/src/components/FormResponse.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/FormResponse.css\";\r\n\r\nfunction FormResponse({ questions }) {\r\n  const [responses, setResponses] = useState([]);\r\n\r\n  // const handleChange = (index, value) => {\r\n  //   setResponses({ ...responses, [index]: value });\r\n  // };\r\n  const handleChange = (questionId, value) => {\r\n    // Find if the response for this question already exists\r\n    const existingResponseIndex = responses.findIndex(\r\n      (response) => response.questionId === questionId\r\n    );\r\n  \r\n    if (existingResponseIndex !== -1) {\r\n      // If a response exists for this question, update it\r\n      const updatedResponses = [...responses];\r\n      updatedResponses[existingResponseIndex] = {\r\n        questionId,\r\n        answerText: value,\r\n      };\r\n      setResponses(updatedResponses);\r\n    } else {\r\n      // If no response exists for this question, add a new one\r\n      setResponses([\r\n        ...responses,\r\n        { questionId, answerText: value },\r\n      ]);\r\n    }\r\n  };\r\n  \r\n\r\n  \r\n  const handleSubmit = async () => {\r\n    try {\r\n      // Prepare the responses by formatting them into an array that includes the question IDs and answers\r\n      const formattedResponses = responses.map((response) => ({\r\n        questionId: response.questionId,  // Ensure you include the question ID\r\n        answerText: response.answerText,  // Include the user's answer text\r\n      }));\r\n  \r\n      // Assuming `formId` is the ID of the form you are submitting to\r\n      const formId = 'yourFormIdHere';  // Replace with the actual form ID\r\n  \r\n      // Send the responses to the backend via POST request\r\n      const response = await fetch(`http://localhost:5000/api/responses/submit/${formId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ answers: formattedResponses }),\r\n      });\r\n  \r\n      if (!response.ok) throw new Error('Failed to submit responses');\r\n      alert('Form submitted successfully!');\r\n    } catch (error) {\r\n      alert(`Error: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"form-response\">\r\n      <h2>Submit Your Response</h2>\r\n      <form onSubmit={(e) => e.preventDefault()}>\r\n        {questions.map((q, index) => (\r\n          <div key={index} className=\"question\">\r\n            <p>\r\n              {q.text} {q.required && <span className=\"required\">*</span>}\r\n            </p>\r\n            {q.type === \"text\" && (\r\n              <input\r\n                type=\"text\"\r\n                onChange={(e) => handleChange(index, e.target.value)}\r\n                required={q.required}\r\n              />\r\n            )}\r\n            {q.type === \"paragraph\" && (\r\n              <textarea\r\n                rows={4}\r\n                onChange={(e) => handleChange(index, e.target.value)}\r\n                required={q.required}\r\n              ></textarea>\r\n            )}\r\n            {q.type === \"radio\" &&\r\n              q.options.map((option, oIndex) => (\r\n                <div key={oIndex}>\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={`${index}-${oIndex}`}\r\n                    name={`question-${index}`}\r\n                    onChange={(e) => handleChange(index, option)}\r\n                  />\r\n                  <label htmlFor={`${index}-${oIndex}`}>{option}</label>\r\n                </div>\r\n              ))}\r\n            {q.type === \"checkbox\" &&\r\n              q.options.map((option, oIndex) => (\r\n                <div key={oIndex}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id={`${index}-${oIndex}`}\r\n                    name={`question-${index}`}\r\n                    onChange={(e) =>\r\n                      handleChange(index, [\r\n                        ...(responses[index] || []),\r\n                        option,\r\n                      ])\r\n                    }\r\n                  />\r\n                  <label htmlFor={`${index}-${oIndex}`}>{option}</label>\r\n                </div>\r\n              ))}\r\n            {q.type === \"file\" && (\r\n              <input\r\n                type=\"file\"\r\n                onChange={(e) => handleChange(index, e.target.files[0])}\r\n                required={q.required}\r\n              />\r\n            )}\r\n          </div>\r\n        ))}\r\n        <button onClick={handleSubmit}>Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormResponse;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}