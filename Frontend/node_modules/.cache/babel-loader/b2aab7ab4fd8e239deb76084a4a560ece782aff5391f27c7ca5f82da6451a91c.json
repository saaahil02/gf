{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arvind Singh\\\\OneDrive\\\\SAHIL123\\\\ProjectMainFolder\\\\gfm\\\\form\\\\Frontend\\\\src\\\\components\\\\FormBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../styles/FormBuilder.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FormBuilder({\n  questions,\n  setQuestions\n}) {\n  _s();\n  const [editingIndex, setEditingIndex] = useState(null);\n  const addQuestion = () => {\n    setQuestions([...questions, {\n      text: \"\",\n      type: \"text\",\n      options: [],\n      required: false\n    }]);\n  };\n  const handleQuestionChange = (index, value) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index].text = value;\n    setQuestions(updatedQuestions);\n  };\n  const handleTypeChange = (index, type) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index].type = type;\n    if ((type === \"radio\" || type === \"checkbox\") && !updatedQuestions[index].options) {\n      updatedQuestions[index].options = [];\n    }\n    setQuestions(updatedQuestions);\n  };\n  const handleOptionChange = (qIndex, oIndex, value) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[qIndex].options[oIndex] = value;\n    setQuestions(updatedQuestions);\n  };\n  const addOption = index => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index].options.push(\"\");\n    setQuestions(updatedQuestions);\n  };\n  const toggleRequired = index => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index].required = !updatedQuestions[index].required;\n    setQuestions(updatedQuestions);\n  };\n  const deleteQuestion = index => {\n    const updatedQuestions = questions.filter((_, i) => i !== index);\n    setQuestions(updatedQuestions);\n  };\n\n  // const saveForm = async () => {\n  //   try {\n  //     const response = await fetch('http://localhost:5000/api/forms/create', {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({ questions }),\n  //     });\n  //     if (!response.ok) throw new Error('Failed to save form');\n  //     alert('Form saved successfully');\n  //   } catch (error) {\n  //     alert(`Error: ${error.message}`);\n  //   }\n  // };\n  // const saveForm = async () => {\n  //   try {\n  //     const response = await fetch('http://localhost:5000/api/forms/create', {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({ questions }),  // Ensure this is correct\n  //     });\n  //     if (!response.ok) throw new Error('Failed to save form');\n  //     alert('Form saved successfully');\n  //   } catch (error) {\n  //     alert(`Error: ${error.message}`);\n  //   }\n  // };\n  // const saveForm = async () => {\n  //   try {\n  //     // Log the request body before sending\n  //     console.log('Sending form data:', { questions });\n\n  //     const response = await fetch('http://localhost:5000/api/forms/create', {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({ questions }),  // Make sure 'questions' is the correct object\n  //     });\n\n  //     if (!response.ok) {\n  //       throw new Error('Failed to save form');\n  //     }\n\n  //     const data = await response.json();\n  //     console.log('Response from server:', data);\n  //     alert('Form saved successfully');\n  //   } catch (error) {\n  //     alert(`Error: ${error.message}`);\n  //   }\n  // };\n  // const saveForm = async () => {\n  //   try {\n  //     // Ensure the frontend matches the expected field names in the backend\n  //     const formattedQuestions = questions.map((q) => ({\n  //       questionText: q.text, // Rename 'text' to 'questionText'\n  //       questionType: q.type, // Rename 'type' to 'questionType'\n  //       options: q.options || [], // If there are options (e.g., for radio/checkbox), include them\n  //       required: q.required,\n  //     }));\n\n  //     const response = await fetch('http://localhost:5000/api/forms/create', {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({ questions: formattedQuestions }), // Send the renamed questions\n  //     });\n\n  //     if (!response.ok) throw new Error('Failed to save form');\n  //     alert('Form saved successfully');\n  //   } catch (error) {\n  //     alert(`Error: ${error.message}`);\n  //   }\n  // };\n\n  const validateForm = questions => {\n    for (const question of questions) {\n      if (!question.text.trim()) return \"Question text cannot be empty.\";\n      if ((question.type === \"radio\" || question.type === \"checkbox\") && !question.options.length) {\n        return \"Options are required for multiple-choice questions.\";\n      }\n    }\n    return null;\n  };\n  const saveForm = async () => {\n    const error = validateForm(questions);\n    if (error) {\n      alert(error);\n      return;\n    }\n    try {\n      const formattedQuestions = questions.map(q => ({\n        questionText: q.text,\n        questionType: q.type,\n        options: q.options || [],\n        required: q.required\n      }));\n      const response = await fetch('http://localhost:5000/api/forms/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          questions: formattedQuestions\n        })\n      });\n      if (!response.ok) throw new Error('Failed to save form');\n      alert('Form saved successfully');\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-builder\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Build Your Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addQuestion,\n      children: \"Add Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions-list\",\n      children: questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter question text\",\n          value: q.text,\n          onChange: e => handleQuestionChange(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: q.type,\n          onChange: e => handleTypeChange(index, e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"text\",\n            children: \"Short Answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"paragraph\",\n            children: \"Paragraph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"radio\",\n            children: \"Multiple Choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"checkbox\",\n            children: \"Checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"file\",\n            children: \"File Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), (q.type === \"radio\" || q.type === \"checkbox\") && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options\",\n          children: [q.options.map((option, oIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter option text\",\n            value: option,\n            onChange: e => handleOptionChange(index, oIndex, e.target.value)\n          }, oIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => addOption(index),\n            children: \"Add Option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: q.required,\n              onChange: () => toggleRequired(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), \"Required\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteQuestion(index),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => saveForm(),\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s(FormBuilder, \"R0sUXpET7OAuSFiEezVCMu2FjeY=\");\n_c = FormBuilder;\nexport default FormBuilder;\nvar _c;\n$RefreshReg$(_c, \"FormBuilder\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FormBuilder","questions","setQuestions","_s","editingIndex","setEditingIndex","addQuestion","text","type","options","required","handleQuestionChange","index","value","updatedQuestions","handleTypeChange","handleOptionChange","qIndex","oIndex","addOption","push","toggleRequired","deleteQuestion","filter","_","i","validateForm","question","trim","length","saveForm","error","alert","formattedQuestions","map","q","questionText","questionType","response","fetch","method","headers","body","JSON","stringify","ok","Error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","e","target","option","checked","_c","$RefreshReg$"],"sources":["C:/Users/Arvind Singh/OneDrive/SAHIL123/ProjectMainFolder/gfm/form/Frontend/src/components/FormBuilder.js"],"sourcesContent":["\r\n\r\nimport React, { useState } from \"react\";\r\nimport \"../styles/FormBuilder.css\";\r\n\r\nfunction FormBuilder({ questions, setQuestions }) {\r\n  const [editingIndex, setEditingIndex] = useState(null);\r\n\r\n  const addQuestion = () => {\r\n    setQuestions([\r\n      ...questions,\r\n      { text: \"\", type: \"text\", options: [], required: false },\r\n    ]);\r\n  };\r\n\r\n  const handleQuestionChange = (index, value) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[index].text = value;\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const handleTypeChange = (index, type) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[index].type = type;\r\n    if ((type === \"radio\" || type === \"checkbox\") && !updatedQuestions[index].options) {\r\n      updatedQuestions[index].options = [];\r\n    }\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const handleOptionChange = (qIndex, oIndex, value) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[qIndex].options[oIndex] = value;\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const addOption = (index) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[index].options.push(\"\");\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const toggleRequired = (index) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[index].required = !updatedQuestions[index].required;\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const deleteQuestion = (index) => {\r\n    const updatedQuestions = questions.filter((_, i) => i !== index);\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  // const saveForm = async () => {\r\n  //   try {\r\n  //     const response = await fetch('http://localhost:5000/api/forms/create', {\r\n  //       method: 'POST',\r\n  //       headers: { 'Content-Type': 'application/json' },\r\n  //       body: JSON.stringify({ questions }),\r\n  //     });\r\n  //     if (!response.ok) throw new Error('Failed to save form');\r\n  //     alert('Form saved successfully');\r\n  //   } catch (error) {\r\n  //     alert(`Error: ${error.message}`);\r\n  //   }\r\n  // };\r\n  // const saveForm = async () => {\r\n  //   try {\r\n  //     const response = await fetch('http://localhost:5000/api/forms/create', {\r\n  //       method: 'POST',\r\n  //       headers: { 'Content-Type': 'application/json' },\r\n  //       body: JSON.stringify({ questions }),  // Ensure this is correct\r\n  //     });\r\n  //     if (!response.ok) throw new Error('Failed to save form');\r\n  //     alert('Form saved successfully');\r\n  //   } catch (error) {\r\n  //     alert(`Error: ${error.message}`);\r\n  //   }\r\n  // };\r\n  // const saveForm = async () => {\r\n  //   try {\r\n  //     // Log the request body before sending\r\n  //     console.log('Sending form data:', { questions });\r\n  \r\n  //     const response = await fetch('http://localhost:5000/api/forms/create', {\r\n  //       method: 'POST',\r\n  //       headers: { 'Content-Type': 'application/json' },\r\n  //       body: JSON.stringify({ questions }),  // Make sure 'questions' is the correct object\r\n  //     });\r\n  \r\n  //     if (!response.ok) {\r\n  //       throw new Error('Failed to save form');\r\n  //     }\r\n  \r\n  //     const data = await response.json();\r\n  //     console.log('Response from server:', data);\r\n  //     alert('Form saved successfully');\r\n  //   } catch (error) {\r\n  //     alert(`Error: ${error.message}`);\r\n  //   }\r\n  // };\r\n  // const saveForm = async () => {\r\n  //   try {\r\n  //     // Ensure the frontend matches the expected field names in the backend\r\n  //     const formattedQuestions = questions.map((q) => ({\r\n  //       questionText: q.text, // Rename 'text' to 'questionText'\r\n  //       questionType: q.type, // Rename 'type' to 'questionType'\r\n  //       options: q.options || [], // If there are options (e.g., for radio/checkbox), include them\r\n  //       required: q.required,\r\n  //     }));\r\n  \r\n  //     const response = await fetch('http://localhost:5000/api/forms/create', {\r\n  //       method: 'POST',\r\n  //       headers: { 'Content-Type': 'application/json' },\r\n  //       body: JSON.stringify({ questions: formattedQuestions }), // Send the renamed questions\r\n  //     });\r\n  \r\n  //     if (!response.ok) throw new Error('Failed to save form');\r\n  //     alert('Form saved successfully');\r\n  //   } catch (error) {\r\n  //     alert(`Error: ${error.message}`);\r\n  //   }\r\n  // };\r\n  \r\n  const validateForm = (questions) => {\r\n    for (const question of questions) {\r\n      if (!question.text.trim()) return \"Question text cannot be empty.\";\r\n      if ((question.type === \"radio\" || question.type === \"checkbox\") && !question.options.length) {\r\n        return \"Options are required for multiple-choice questions.\";\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  const saveForm = async () => {\r\n    const error = validateForm(questions);\r\n    if (error) {\r\n      alert(error);\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const formattedQuestions = questions.map((q) => ({\r\n        questionText: q.text,\r\n        questionType: q.type,\r\n        options: q.options || [],\r\n        required: q.required,\r\n      }));\r\n  \r\n      const response = await fetch('http://localhost:5000/api/forms/create', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ questions: formattedQuestions }),\r\n      });\r\n  \r\n      if (!response.ok) throw new Error('Failed to save form');\r\n      alert('Form saved successfully');\r\n    } catch (error) {\r\n      alert(`Error: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"form-builder\">\r\n      <h2>Build Your Form</h2>\r\n      <button onClick={addQuestion}>Add Question</button>\r\n      <div className=\"questions-list\">\r\n        {questions.map((q, index) => (\r\n          <div key={index} className=\"question\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter question text\"\r\n              value={q.text}\r\n              onChange={(e) => handleQuestionChange(index, e.target.value)}\r\n            />\r\n            <select\r\n              value={q.type}\r\n              onChange={(e) => handleTypeChange(index, e.target.value)}\r\n            >\r\n              <option value=\"text\">Short Answer</option>\r\n              <option value=\"paragraph\">Paragraph</option>\r\n              <option value=\"radio\">Multiple Choice</option>\r\n              <option value=\"checkbox\">Checkbox</option>\r\n              <option value=\"file\">File Upload</option>\r\n            </select>\r\n            {(q.type === \"radio\" || q.type === \"checkbox\") && (\r\n              <div className=\"options\">\r\n                {q.options.map((option, oIndex) => (\r\n                  <input\r\n                    key={oIndex}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter option text\"\r\n                    value={option}\r\n                    onChange={(e) =>\r\n                      handleOptionChange(index, oIndex, e.target.value)\r\n                    }\r\n                  />\r\n                ))}\r\n                <button onClick={() => addOption(index)}>Add Option</button>\r\n              </div>\r\n            )}\r\n            <div className=\"controls\">\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={q.required}\r\n                  onChange={() => toggleRequired(index)}\r\n                />\r\n                Required\r\n              </label>\r\n              <button onClick={() => deleteQuestion(index)}>Delete</button>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        ))}\r\n      </div>\r\n      <button onClick={() => saveForm()}>submit</button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormBuilder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}